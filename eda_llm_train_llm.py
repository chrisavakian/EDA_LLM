# -*- coding: utf-8 -*-
"""EDA_LLM_Train_LLM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hwU0Gd7neNM3YonjCvQCrcgaG2XJmory
"""

import json
from datasets import Dataset
from transformers import LlamaForCausalLM, LlamaTokenizer, Trainer, TrainingArguments

model_name = "llama-7b"
tokenizer = LlamaTokenizer.from_pretrained(model_name)
model = LlamaForCausalLM.from_pretrained(model_name)

tokenizer.save_pretrained("./llama-7b")
model.save_pretrained("./llama-7b")

with open("training_data.json", "r") as f:
    data = json.load(f)

dataset = Dataset.from_dict({"label": [item["label"] for item in data], "data": [item["data"] for item in data]})

def tokenize_function(examples):
    return tokenizer(examples["data"], padding="max_length", truncation=True)

tokenized_datasets = dataset.map(tokenize_function, batched=True)

training_args = TrainingArguments(
    output_dir="./llama-7b-finetuned",
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=4,
    per_device_eval_batch_size=4,
    num_train_epochs=3,
    weight_decay=0.01,
    save_total_limit=2,
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_datasets,
    eval_dataset=tokenized_datasets,
)

trainer.train()

trainer.save_model("./llama-7b-finetuned")
tokenizer.save_pretrained("./llama-7b-finetuned")